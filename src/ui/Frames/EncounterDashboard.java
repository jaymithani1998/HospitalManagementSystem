/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui.Frames;

import java.sql.Timestamp;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import main.Main;
import model.entities.Doctor;
import model.entities.Encounter;
import model.entities.VitalSigns;
import ui.DoctorHomeDashboard;
import util.Utility;

/**
 *
 * @author jaymithani
 */
public class EncounterDashboard extends javax.swing.JFrame {

    /**
     * Creates new form VitalSignsDashboard
     */
    public EncounterDashboard() {
        initComponents();
        populateTable();
        populatePatientComboBox();
    }
    private void populatePatientComboBox(){
        String[] cityNames = Main.patDirectory.getPatientsForComboBox();
        DefaultComboBoxModel model = new DefaultComboBoxModel(cityNames);
        comboBoxPatientID.setModel(model);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DashboardLeftPanel = new javax.swing.JPanel();
        txtSearchField = new javax.swing.JTextField();
        tableView = new javax.swing.JScrollPane();
        tblView = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        DashboardRightPanel = new javax.swing.JPanel();
        lblId = new javax.swing.JLabel();
        bptxt = new javax.swing.JTextField();
        lblCity2 = new javax.swing.JLabel();
        heartratetxt = new javax.swing.JTextField();
        lblCity4 = new javax.swing.JLabel();
        lblCity5 = new javax.swing.JLabel();
        comboBoxPatientID = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        DashboardLeftPanel.setBackground(new java.awt.Color(0, 153, 153));

        txtSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchFieldKeyReleased(evt);
            }
        });

        tblView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Doctor ID", "Patient ID", "Blood Pressure", "Heart Rate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblViewMouseClicked(evt);
            }
        });
        tableView.setViewportView(tblView);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DashboardLeftPanelLayout = new javax.swing.GroupLayout(DashboardLeftPanel);
        DashboardLeftPanel.setLayout(DashboardLeftPanelLayout);
        DashboardLeftPanelLayout.setHorizontalGroup(
            DashboardLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DashboardLeftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DashboardLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DashboardLeftPanelLayout.createSequentialGroup()
                        .addGroup(DashboardLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSearchField)
                            .addComponent(tableView, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(DashboardLeftPanelLayout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addContainerGap(118, Short.MAX_VALUE))))
        );
        DashboardLeftPanelLayout.setVerticalGroup(
            DashboardLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DashboardLeftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableView, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DashboardLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnBack)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        DashboardRightPanel.setBackground(new java.awt.Color(0, 153, 153));

        lblId.setForeground(new java.awt.Color(255, 255, 255));

        bptxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bptxtActionPerformed(evt);
            }
        });

        lblCity2.setForeground(new java.awt.Color(255, 255, 255));
        lblCity2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCity2.setText("Blood Pressure");

        heartratetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heartratetxtActionPerformed(evt);
            }
        });

        lblCity4.setForeground(new java.awt.Color(255, 255, 255));
        lblCity4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCity4.setText("Heart Rate");

        lblCity5.setForeground(new java.awt.Color(255, 255, 255));
        lblCity5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCity5.setText("Patient ID");

        comboBoxPatientID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxPatientIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DashboardRightPanelLayout = new javax.swing.GroupLayout(DashboardRightPanel);
        DashboardRightPanel.setLayout(DashboardRightPanelLayout);
        DashboardRightPanelLayout.setHorizontalGroup(
            DashboardRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DashboardRightPanelLayout.createSequentialGroup()
                .addGroup(DashboardRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DashboardRightPanelLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(lblId, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DashboardRightPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(DashboardRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(DashboardRightPanelLayout.createSequentialGroup()
                                .addComponent(lblCity2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bptxt, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(DashboardRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(DashboardRightPanelLayout.createSequentialGroup()
                                    .addComponent(lblCity5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(comboBoxPatientID, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(DashboardRightPanelLayout.createSequentialGroup()
                                    .addComponent(lblCity4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(heartratetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        DashboardRightPanelLayout.setVerticalGroup(
            DashboardRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DashboardRightPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblId, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DashboardRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity2)
                    .addComponent(bptxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(DashboardRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity4)
                    .addComponent(heartratetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(DashboardRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity5)
                    .addComponent(comboBoxPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DashboardLeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DashboardRightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(DashboardLeftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DashboardRightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tblViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblViewMouseClicked
        // TODO add your handling code here:
        try {
            int SelectRowIndex = tblView.getSelectedRow();

            if (SelectRowIndex < 0) {
                JOptionPane.showMessageDialog(this, "Please select a row to view or update details");
                return;
            }

            DefaultTableModel model = (DefaultTableModel) tblView.getModel();
            String id = model.getValueAt(SelectRowIndex, 0).toString();

            HashMap<String, Encounter> h = Main.encounterDirectory.getDirectory();

            lblId.setText(h.get(id).getId());
            heartratetxt.setText(String.valueOf(h.get(id).getVitalSigns().getHeartRate()));
            bptxt.setText(String.valueOf(h.get(id).getVitalSigns().getBloodPressure()));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

    }//GEN-LAST:event_tblViewMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
       
        if(bptxt.getText().equals("") || heartratetxt.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Fields cannot be blank!");
            }
        else if(!Utility.isOnlyNumeric(bptxt.getText())){
                JOptionPane.showMessageDialog(null, "Incorrect blood pressure format (only numbers allowed)");
        }
        else if(!Utility.isOnlyNumeric(heartratetxt.getText())){
                JOptionPane.showMessageDialog(null, "Incorrect heart rate format (only numbers allowed)");
        }
        else{
            
            Encounter encounter = new Encounter();
            encounter.setPatientId(comboBoxPatientID.getSelectedItem().toString().split(":")[1]);
            encounter.setDoctorId(Main.currentUser.getId());
            encounter.setTimestamp(new Timestamp(System.currentTimeMillis()));

            VitalSigns vs = new VitalSigns();
            vs.setBloodPressure(Integer.parseInt(bptxt.getText()));
            vs.setHeartRate(Integer.parseInt(heartratetxt.getText()));
            encounter.setVitalSigns(vs);
            Main.encounterDirectory.addEncounter(encounter);
            VitalSigns v = new VitalSigns();

            populateTable();
            resetForm();
                
        }
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        new DoctorHomeDashboard().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void bptxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bptxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bptxtActionPerformed

    private void heartratetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heartratetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_heartratetxtActionPerformed

    private void comboBoxPatientIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxPatientIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxPatientIDActionPerformed

    private void txtSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchFieldKeyReleased
        DefaultTableModel model = (DefaultTableModel)tblView.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        tblView.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(txtSearchField.getText().trim()));
    }//GEN-LAST:event_txtSearchFieldKeyReleased

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int SelectRowIndex = tblView.getSelectedRow();
        if (SelectRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view or update details");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblView.getModel();
        String id = model.getValueAt(SelectRowIndex, 0).toString();
        Main.encounterDirectory.deleteEncounter(id);
        JOptionPane.showMessageDialog(this, "Patient's Vitals details deleted");
        resetForm();
        populateTable();
        //lblId.setText(id);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblView.getModel();
        model.setRowCount(0);
        HashMap<String, Encounter> docDir = Main.encounterDirectory.getDirectory();
        for (String id : docDir.keySet()) {
            Object[] row = new Object[5];
            Encounter d = docDir.get(id);
            row[0] = d.getId();
            row[1] = d.getDoctorId();
            row[2] = d.getPatientId();
            row[3] = String.valueOf(d.getVitalSigns().getBloodPressure());
            row[4] = String.valueOf(d.getVitalSigns().getHeartRate());
            model.addRow(row);
        }
    }

    private void resetForm() {
        heartratetxt.setText("");
        bptxt.setText("");
        lblId.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EncounterDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EncounterDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EncounterDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EncounterDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EncounterDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DashboardLeftPanel;
    private javax.swing.JPanel DashboardRightPanel;
    private javax.swing.JTextField bptxt;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JComboBox<String> comboBoxPatientID;
    private javax.swing.JTextField heartratetxt;
    private javax.swing.JLabel lblCity2;
    private javax.swing.JLabel lblCity4;
    private javax.swing.JLabel lblCity5;
    private javax.swing.JLabel lblId;
    private javax.swing.JScrollPane tableView;
    private javax.swing.JTable tblView;
    private javax.swing.JTextField txtSearchField;
    // End of variables declaration//GEN-END:variables
}
